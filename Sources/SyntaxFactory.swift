/// SyntaxFactory.swift
/// Automatically generated by SyntaxGen. Do not edit!
///
/// Copyright 2017-2019, The Silt Language Project.
///
/// This project is released under the MIT license, a copy of which is
/// available in the repository.
public enum SyntaxFactory {
  public static func makeToken(_ kind: TokenKind, presence: SourcePresence,
                               leadingTrivia: Trivia = [],
                               trailingTrivia: Trivia = []) -> TokenSyntax {
    let raw = RawSyntax.createAndCalcLength(kind: kind, leadingTrivia: leadingTrivia,
      trailingTrivia: trailingTrivia, presence: presence)
    let data = SyntaxData(raw: raw)
    return TokenSyntax(root: data, data: data)
  }

  public static func makeUnknownSyntax(tokens: [TokenSyntax]) -> Syntax {
    let raw = RawSyntax.createAndCalcLength(kind: .unknown,
      layout: tokens.map { $0.data.raw }, presence: .present)
    let data = SyntaxData(raw: raw)
    return UnknownSyntax(root: data, data: data)
  }
  public static func makeIdentifierListSyntax(
    _ elements: [TokenSyntax]) -> IdentifierListSyntax {
    let raw = RawSyntax.createAndCalcLength(kind: SyntaxKind.identifierList,
      layout: elements.map { $0.data.raw }, presence: SourcePresence.present)
    let data = SyntaxData(raw: raw)
    return IdentifierListSyntax(root: data, data: data)
  }
  public static func makeQualifiedNameSyntax(
    _ elements: [QualifiedNamePieceSyntax]) -> QualifiedNameSyntax {
    let raw = RawSyntax.createAndCalcLength(kind: SyntaxKind.qualifiedName,
      layout: elements.map { $0.data.raw }, presence: SourcePresence.present)
    let data = SyntaxData(raw: raw)
    return QualifiedNameSyntax(root: data, data: data)
  }
  public static func makeQualifiedNamePiece(name: TokenSyntax, trailingPeriod: TokenSyntax?) -> QualifiedNamePieceSyntax {
    let layout: [RawSyntax?] = [
      name.data.raw,
      trailingPeriod?.data.raw,
  ]
