-- RUN: %silt %s --dump girgen 2>&1 | %FileCheck %s

-- CHECK: module switch-dispatch where
module switch-dispatch where

data Bool : Type where
  tt : Bool
  ff : Bool

data Index : Type where
  one : Index
  two : Index
  three : Index
  four : Index

dispatch : Bool -> Bool
dispatch tt = tt
dispatch ff = ff
-- CHECK-LABEL: @switch-dispatch.dispatch : (switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : (switch-dispatch.Bool) -> _):
-- CHECK:   %2 = function_ref @bb2
-- CHECK:   %3 = function_ref @bb1
-- CHECK:   switch_constr %0 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %2 ; switch-dispatch.Bool.ff : %3
-- CHECK: bb1:
-- CHECK:   %5 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.ff
-- CHECK:   apply %1(%5) : (switch-dispatch.Bool) -> _
-- CHECK: bb2:
-- CHECK:   %7 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.tt
-- CHECK:   apply %1(%7) : (switch-dispatch.Bool) -> _
-- CHECK: } -- end gir function switch-dispatch.dispatch

and : Bool -> Bool -> Bool
and tt tt = tt
and ff tt = ff
and tt ff = ff
and ff ff = ff
-- CHECK: @switch-dispatch.and : (switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : (switch-dispatch.Bool) -> _):
-- CHECK:   %3 = function_ref @bb4
-- CHECK:   %4 = function_ref @bb1
-- CHECK:   switch_constr %0 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %3 ; switch-dispatch.Bool.ff : %4
-- CHECK: bb1:
-- CHECK:   %6 = function_ref @bb3
-- CHECK:   %7 = function_ref @bb2
-- CHECK:   switch_constr %1 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %6 ; switch-dispatch.Bool.ff : %7
-- CHECK: bb2:
-- CHECK:   %9 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.ff
-- CHECK:   apply %2(%9)
-- CHECK: bb3:
-- CHECK:   %11 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.ff
-- CHECK:   apply %2(%11)
-- CHECK: bb4:
-- CHECK:   %13 = function_ref @bb6
-- CHECK:   %14 = function_ref @bb5
-- CHECK:   switch_constr %1 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %13 ; switch-dispatch.Bool.ff : %14
-- CHECK: bb5:
-- CHECK:   %16 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.ff
-- CHECK:   apply %2(%16) : (switch-dispatch.Bool) -> _
-- CHECK: bb6:
-- CHECK:   %18 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.tt
-- CHECK:   apply %2(%18) : (switch-dispatch.Bool) -> _
-- CHECK:  } -- end gir function switch-dispatch.and


or : Bool -> Bool -> Bool
or tt tt = tt
or tt ff = tt
or ff tt = tt
or ff ff = ff
-- CHECK: @switch-dispatch.or : (switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : (switch-dispatch.Bool) -> _):
-- CHECK:   %3 = function_ref @bb4
-- CHECK:   %4 = function_ref @bb1
-- CHECK:   switch_constr %0 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %3 ; switch-dispatch.Bool.ff : %4
-- CHECK: bb1:
-- CHECK:   %6 = function_ref @bb3
-- CHECK:   %7 = function_ref @bb2
-- CHECK:   switch_constr %1 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %6 ; switch-dispatch.Bool.ff : %7
-- CHECK: bb2:
-- CHECK:   %9 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.ff
-- CHECK:   apply %2(%9) : (switch-dispatch.Bool) -> _
-- CHECK: bb3:
-- CHECK:   %11 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.tt
-- CHECK:   apply %2(%11) : (switch-dispatch.Bool) -> _
-- CHECK: bb4:
-- CHECK:   %13 = function_ref @bb6
-- CHECK:   %14 = function_ref @bb5
-- CHECK:   switch_constr %1 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %13 ; switch-dispatch.Bool.ff : %14
-- CHECK: bb5:
-- CHECK:   %16 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.tt
-- CHECK:   apply %2(%16) : (switch-dispatch.Bool) -> _
-- CHECK: bb6:
-- CHECK:   %18 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.tt
-- CHECK:   apply %2(%18) : (switch-dispatch.Bool) -> _
-- CHECK:  } -- end gir function switch-dispatch.or

wild : Bool -> Bool -> Bool
wild _ x = x
-- CHECK: @switch-dispatch.wild : (switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : (switch-dispatch.Bool) -> _):
-- CHECK:   apply %2(%1) : (switch-dispatch.Bool) -> _
-- CHECK: } -- end gir function switch-dispatch.wild

and2 : Bool -> Bool -> Bool
and2 tt b = b
and2 ff b = ff
-- CHECK: @switch-dispatch.and2 : (switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : (switch-dispatch.Bool) -> _):
-- CHECK:   %3 = function_ref @bb2
-- CHECK:   %4 = function_ref @bb1
-- CHECK:   switch_constr %0 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %3 ; switch-dispatch.Bool.ff : %4
-- CHECK: bb1:
-- CHECK:   %6 = data_init switch-dispatch.Bool ; switch-dispatch.Bool.ff
-- CHECK:   apply %2(%6) : (switch-dispatch.Bool) -> _
-- CHECK: bb2:
-- CHECK:   apply %2(%1) : (switch-dispatch.Bool) -> _
-- CHECK: } -- end gir function switch-dispatch.and2

maranget : Bool -> Bool -> Bool -> Index
maranget _  ff tt = one
maranget ff tt _  = two
maranget _  _  ff = three
maranget _  _  tt = four
-- CHECK: @switch-dispatch.maranget : (switch-dispatch.Bool ; switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Index) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : switch-dispatch.Bool; %3 : (switch-dispatch.Index) -> _):
-- CHECK:   %4 = function_ref @bb6
-- CHECK:   %5 = function_ref @bb1
-- CHECK:   switch_constr %1 : switch-dispatch.Bool ; switch-dispatch.Bool.ff : %4 ; default : %5
-- CHECK: bb1:
-- CHECK:   %7 = function_ref @bb5
-- CHECK:   %8 = function_ref @bb2
-- CHECK:   switch_constr %0 : switch-dispatch.Bool ; switch-dispatch.Bool.ff : %7 ; default : %8
-- CHECK: bb2:
-- CHECK:   %10 = function_ref @bb4
-- CHECK:   %11 = function_ref @bb3
-- CHECK:   switch_constr %2 : switch-dispatch.Bool ; switch-dispatch.Bool.ff : %10 ; switch-dispatch.Bool.tt : %11
-- CHECK: bb3:
-- CHECK:   %13 = data_init switch-dispatch.Index ; switch-dispatch.Index.four
-- CHECK:   apply %3(%13) : (switch-dispatch.Index) -> _
-- CHECK: bb4:
-- CHECK:   %15 = data_init switch-dispatch.Index ; switch-dispatch.Index.three
-- CHECK:   apply %3(%15) : (switch-dispatch.Index) -> _
-- CHECK: bb5:
-- CHECK:   %17 = data_init switch-dispatch.Index ; switch-dispatch.Index.two
-- CHECK:   apply %3(%17) : (switch-dispatch.Index) -> _
-- CHECK: bb6:
-- CHECK:   %19 = function_ref @bb8
-- CHECK:   %20 = function_ref @bb7
-- CHECK:   switch_constr %2 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %19 ; switch-dispatch.Bool.ff : %20
-- CHECK: bb7:
-- CHECK:   %22 = data_init switch-dispatch.Index ; switch-dispatch.Index.three
-- CHECK:   apply %3(%22) : (switch-dispatch.Index) -> _
-- CHECK: bb8:
-- CHECK:   %24 = data_init switch-dispatch.Index ; switch-dispatch.Index.one
-- CHECK:   apply %3(%24) : (switch-dispatch.Index) -> _
-- CHECK: } -- end gir function switch-dispatch.maranget

if_then_else_ : Bool -> Bool -> Bool -> Bool
if tt then x else _ = x
if ff then _ else x = x
-- CHECK: @switch-dispatch.if_then_else_ : (switch-dispatch.Bool ; switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : switch-dispatch.Bool; %3 : (switch-dispatch.Bool) -> _):
-- CHECK:   %4 = function_ref @bb2
-- CHECK:   %5 = function_ref @bb1
-- CHECK:   switch_constr %0 : switch-dispatch.Bool ; switch-dispatch.Bool.tt : %4 ; switch-dispatch.Bool.ff : %5
-- CHECK: bb1:
-- CHECK:   apply %3(%2) : (switch-dispatch.Bool) -> _
-- CHECK: bb2:
-- CHECK:   apply %3(%1) : (switch-dispatch.Bool) -> _
-- CHECK: } -- end gir function switch-dispatch.if_then_else_

_?_::_ : Bool -> Bool -> Bool -> Bool
cond ? t :: f = if cond then t else f
-- CHECK: @switch-dispatch._?_::_ : (switch-dispatch.Bool ; switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _ {
-- CHECK: bb0(%0 : switch-dispatch.Bool; %1 : switch-dispatch.Bool; %2 : switch-dispatch.Bool; %3 : (switch-dispatch.Bool) -> _):
-- CHECK:   %4 = function_ref @switch-dispatch.if_then_else_
-- CHECK:   %5 = function_ref @bb1
-- CHECK:   apply %4(%0 ; %1 ; %2 ; %5) : (switch-dispatch.Bool ; switch-dispatch.Bool ; switch-dispatch.Bool) -> (switch-dispatch.Bool) -> _
-- CHECK: bb1(%7 : switch-dispatch.Bool):
-- CHECK:   apply %3(%7) : (switch-dispatch.Bool) -> _
-- CHECK: } -- end gir function switch-dispatch._?_::_
