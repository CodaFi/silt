-- RUN: %silt %s --dump girgen 2>&1 | %FileCheck %s --prefixes CHECK-GIR

-- CHECK-GIR: module dispatch-nested where
module dispatch-nested where

data Nat : Type where
  zero : Nat
  suc  : Nat -> Nat

_+_ : Nat -> Nat -> Nat
zero  + m = m
suc n + m = suc (n + m)
-- CHECK-GIR: dispatch-nested._+_ : (dispatch-nested.Nat ; dispatch-nested.Nat) -> (dispatch-nested.Nat) -> _ {
-- CHECK-GIR: bb0(%0 : dispatch-nested.Nat; %1 : dispatch-nested.Nat; %2 : (dispatch-nested.Nat) -> _):
-- CHECK-GIR:   %3 = function_ref @bb2
-- CHECK-GIR:   %4 = function_ref @bb1
-- CHECK-GIR:   switch_constr %0 : dispatch-nested.Nat ; dispatch-nested.Nat.zero : %3 ; dispatch-nested.Nat.suc : %4
-- CHECK-GIR: bb1(%6 : dispatch-nested.Nat):
-- CHECK-GIR:   %7 = function_ref @bb0
-- CHECK-GIR:   %8 = function_ref @bb3
-- CHECK-GIR:   apply %7(%6 ; %1 ; %8) : (dispatch-nested.Nat ; dispatch-nested.Nat) -> (dispatch-nested.Nat) -> _
-- CHECK-GIR: bb2:
-- CHECK-GIR:   %10 = copy_value %1
-- CHECK-GIR:   destroy_value %1
-- CHECK-GIR:   destroy_value %0
-- CHECK-GIR:   apply %2(%10) : (dispatch-nested.Nat) -> _
-- CHECK-GIR: bb3(%14 : dispatch-nested.Nat):
-- CHECK-GIR:   %15 = copy_value %14
-- CHECK-GIR:   %16 = data_init dispatch-nested.Nat ; dispatch-nested.Nat.suc ; %15
-- CHECK-GIR:   apply %2(%16) : (dispatch-nested.Nat) -> _
-- CHECK-GIR: } -- end gir function dispatch-nested._+_

data Bool : Type where
  false : Bool
  true : Bool

data Byte : Type where
  byte : Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Byte

data Char : Type where
  eof : Char
  ascii : Byte -> Char

doThing : Char -> Byte
doThing eof = byte false false false false false false false false
doThing (ascii b) = b
-- CHECK-GIR: @dispatch-nested.doThing : (dispatch-nested.Char) -> (dispatch-nested.Byte) -> _ {
-- CHECK-GIR: bb0(%0 : dispatch-nested.Char; %1 : (dispatch-nested.Byte) -> _):
-- CHECK-GIR:   %2 = function_ref @bb2                          -- user: %4
-- CHECK-GIR:   %3 = function_ref @bb1                          -- user: %4
-- CHECK-GIR:   switch_constr %0 : dispatch-nested.Char ; dispatch-nested.Char.eof : %2 ; dispatch-nested.Char.ascii : %3
-- CHECK-GIR: bb1(%5 : dispatch-nested.Byte):
-- CHECK-GIR:   %6 = copy_value %5
-- CHECK-GIR:   destroy_value %0
-- CHECK-GIR:   apply %1(%6) : (dispatch-nested.Byte) -> _
-- CHECK-GIR: bb2:
-- CHECK-GIR:   %9 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %10 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %11 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %12 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %13 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %14 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %15 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %16 = data_init dispatch-nested.Bool ; dispatch-nested.Bool.false
-- CHECK-GIR:   %17 = data_init dispatch-nested.Byte ; dispatch-nested.Byte.byte ; %9 ; %10 ; %11 ; %12 ; %13 ; %14 ; %15 ; %16
-- CHECK-GIR:   apply %1(%17) : (dispatch-nested.Byte) -> _
-- CHECK-GIR: } -- end gir function dispatch-nested.doThing

